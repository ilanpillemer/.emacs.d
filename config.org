#+TITLE: Emacs Configuration
#+AUTHOR: Nelson Loyola

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is
a fantastic way to manage package configurations.

I created it after examining [[https://github.com/danielmai/.emacs.d][Daniel Mai]]'s configuration.

* Installing Emacs

** Ubuntu

I've installed Emacs from source and use the ~emacs-24.5~ tag. I used the instructions provided
by Xah Lee given [[http://ergoemacs.org/emacs/building_emacs_on_linux.html][here]], but first the following command has to be run.

#+begin_src sh
./autogen.conf
#+end_src

* Personal Information

#+begin_src emacs-lisp
(setq user-full-name "Nelson Loyola"
      user-mail-address "nloyola@gmail.com")
#+end_src

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Theme
** Monokai theme

#+begin_src emacs-lisp
(use-package monokai-theme
  :ensure t
  :init
  (progn
    (load-theme 'monokai t)
    (setq monokai-use-variable-pitch nil)))
#+end_src

* Font

[[http://input.fontbureau.com/download/][Input Font]]: Install it on Ubuntu as follows:

#+begin_src sh :tangle no
mv Input-Font.zip ~/.fonts
cd ~/.fonts
unzip Input-Font.zip
#+end_src

And here's how we tell Emacs to use the font we want to use. Copy the following line to your
=~/.Xresources= file.

#+begin_src sh :tangle no
Emacs.font: Input Mono Condensed-9
#+end_src

And then merge the setting to your X server resource database.

#+begin_src sh :tangle no
xrdb -merge ~/.Xresources
#+end_src

* Sane defaults

Some commands are disabled by default. They are enabled in our config using the following:

#+begin_src emacs-lisp
;; These functions are useful. Activate them.
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)
#+end_src

#+begin_src emacs-lisp
  (setq
   sentence-end-double-space nil    ; sentences end with a single space
   inhibit-default-init t           ; no global initialization
   transient-mark-mode t            ; leave region hi-lite off
   default-major-mode 'text-mode    ; default mode is text-mode
   initial-major-mode 'text-mode    ; mode used by *scratch* buffer
   make-backup-files nil            ; no auto-backup files
   next-line-add-newlines nil       ; don't add new lines past eof
   scroll-step 1                    ; don't scroll to middle of page
   visible-bell t                   ; get rid of the !%!$@$ bell
   require-final-newline t          ; add \n to end of file if required
   backup-by-copying-when-linked t  ;
   font-lock-maximum-decoration t)   ; level of decoration {1 - 3}, t = max

  (setq-default case-fold-search t)       ; make searches case insensitive
  (setq-default indent-tabs-mode nil)     ; use spaces instead of \t character

  ; suggest bound key as alternative to a M-x command
  (setq suggest-key-bindings 5)

  ; turn off auto-save by default to get around NFS timeout problems
  (setq auto-save-default nil)

  (setq fill-column 100 )                 ; set line wrap at column 100.

  ;; replace "yes or no" prompt with "y or n" prompt
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top
  (setq-default indent-tabs-mode nil)

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  (show-paren-mode t)

  (column-number-mode t)

  (global-visual-line-mode)
  (diminish 'visual-line-mode)

  (setq uniquify-buffer-name-style 'forward)

  ;; Don't beep at me
  (setq visible-bell t)

  (setq grep-command "grep -nH -r --include=\\* -e  .")
#+end_src

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+end_src

Show line numbers.

#+begin_src emacs-lisp
(dolist (mode-hook '(text-mode-hook prog-mode-hook))
  (add-hook mode-hook
            (lambda ()
              (linum-mode 1))))
#+end_src

* List buffers

ibuffer is the improved version of list-buffers.

#+begin_src emacs-lisp
;; make ibuffer the default buffer lister.
(defalias 'list-buffers 'ibuffer)
#+end_src


source: http://ergoemacs.org/emacs/emacs_buffer_management.html

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]

* Recentf

#+begin_src emacs-lisp
(use-package recentf
  :commands ido-recentf-open
  :init
  (progn
    (recentf-mode t)
    (setq recentf-max-saved-items 200)))
#+end_src

* Org mode

Truly the way to [[http://orgmode.org/][live life in plain text]]. I mainly use it to take
notes and save executable source blocks. I'm also starting to make use
of its agenda, timestamping, and capturing features.

It goes without saying that I also use it to manage my Emacs config.

** Org activation bindings

Set up some global key bindings that integrate with Org Mode features.

#+begin_src emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+end_src

*** Org agenda

Learned about [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#org-agenda][this =delq= and =mapcar= trick from Sacha Chua's config]].

#+begin_src emacs-lisp
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/Dropbox/Agenda"))))
#+end_src

*** Org capture

#+begin_src emacs-lisp
(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file "~/Dropbox/Notes/notes.org")
#+end_src

** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for
speed keys in Org mode]].

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

#+begin_src emacs-lisp
(setq org-image-actual-width 550)
#+end_src


** Org tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

** Org babel languages

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (scheme . t)
   (sh . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Org babel/source blocks

Have source blocks properly syntax highlighted and with the editing popup window staying within the
same window so all the windows don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

Fontification doesn't work with markdown mode when the block is indented after editing it in the org
src buffer---the leading #s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things consistent as it doesn't pad source
blocks with leading spaces.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src

* Tramp

#+begin_src emacs-lisp :tangle no
(use-package tramp)
#+end_src

* Shell

#+begin_src emacs-lisp
(bind-key "C-x m" 'shell)
(bind-key "C-x M" 'ansi-term)
#+end_src

** Winner mode

Winner mode allows you to undo/redo changes to window changes in Emacs
and allows you.

#+begin_src emacs-lisp
(winner-mode t)
#+end_src

** Transpose frame

#+begin_src emacs-lisp
(use-package transpose-frame
  :ensure t
  :bind ("S-M-t" . transpose-frame))
#+end_src

* Ido

#+begin_src emacs-lisp
  (use-package ido
               :init
               (progn
                 (setq ido-enable-flex-matching t)
                 (setq ido-everywhere t)
                 (ido-mode t)
                 ;; (use-package ido-ubiquitous
                 ;;   :ensure t
                 ;;   :init (ido-ubiquitous-mode))
                 (use-package ido-vertical-mode
                              :ensure t
                              :init (ido-vertical-mode 1)
                              (setq ido-vertical-define-keys 'C-n-and-C-p-only))))
#+end_src

* Whitespace mode

#+begin_src emacs-lisp
(use-package whitespace
  :bind ("s-<f10>" . whitespace-mode))
#+end_src

* ELPA packages

These are the packages that are not built into Emacs.

** Avy

A quick way to jump around text in buffers.

#+begin_src emacs-lisp
  (use-package avy
               :bind (("C-c SPC" . avy-goto-char)
                      ("C-'" . avy-goto-char-2)
                      ("M-g M-g" . avy-goto-line)))
#+end_src

** Ace Window

[[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+begin_src emacs-lisp
(use-package ace-window)
#+end_src

** Helm

#+begin_src emacs-lisp
    (use-package helm
                 :ensure t
                 :diminish helm-mode
                 :init (progn
                         ;; must set before helm-config, otherwise helm uses the default
                         ;; prefix "C-x c", which is inconvenient because you can
                         ;; accidentially press "C-x C-c"
                         (setq helm-command-prefix-key "C-c h")
                         (require 'helm-config)
                         (require 'helm-eshell)
                         (require 'helm-files)
                         (require 'helm-grep)
                         (use-package helm-projectile
                                      :ensure t
                                      :commands helm-projectile
                                      :bind (("C-c p h" . helm-projectile)
                                             ("C-S-r" .  helm-projectile-find-file)))
                         (require 'helm-projectile)
                         (use-package helm-ag :ensure t)
                         ;; rebihnd tab to do persistent action
                         (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
                         ;; make TAB works in terminal
                         (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
                         ;; list actions using C-z
                         (define-key helm-map (kbd "C-z")  'helm-select-action)

                         (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
                         (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
                         (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)

                         (setq helm-ff-newfile-prompt-p nil
                               helm-M-x-fuzzy-match t
                               helm-google-suggest-use-curl-p t
                               ;; scroll 4 lines other window using M-<next>/M-<prior>
                               helm-scroll-amount 4
                               ;; do not display invisible candidates
                               helm-quick-update t
                               ;; be idle for this many seconds, before updating in delayed sources.
                               helm-idle-delay 0.01
                               ;; be idle for this many seconds, before updating candidate buffer
                               helm-input-idle-delay 0.01
                               ;; search for library in `require' and `declare-function' sexp.
                               helm-ff-search-library-in-sexp t

                               helm-split-window-default-side 'below
                               helm-split-window-in-side-p nil
                               helm-always-two-windows nil
                               helm-buffers-favorite-modes (append helm-buffers-favorite-modes
                                                                   '(picture-mode artist-mode))
                               ;; limit the number of displayed canidates
                               helm-candidate-number-limit 100
                               ;; show all candidates when set to 0
                               helm-M-x-requires-pattern 0
                               helm-ff-file-name-history-use-recentf t
                               ;; move to end or beginning of source
                               ;; when reaching top or bottom of source.
                               helm-move-to-line-cycle-in-source t
                               ;; Needed in helm-buffers-list
                               ido-use-virtual-buffers t
                               ;; fuzzy matching buffer names when non--nil
                               ;; useful in helm-mini that lists buffers
                               helm-buffers-fuzzy-matching t
                               ;; truncate long lines
                               helm-truncate-lines t
                               helm-autoresize-min-height 15
                               helm-autoresize-max-height 15
                               helm-display-header-line nil
                               helm-buffer-max-length 45
                               helm-yas-display-key-on-candidate t)
                         (cond (window-system
                                (add-to-list 'display-buffer-alist
                                             `("\\*helm"
                                               (display-buffer-in-side-window)
                                               (inhibit-same-window . nil)
                                               (reusable-frames . visible)
                                               (side            . bottom)
                                               (window-height   . 0.15)))
                                ))
                         ;; Save current position to mark ring when jumping to a different place
                         (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)
                         (helm-mode)
                         (helm-autoresize-mode 1))
                 :bind (("M-x" . helm-M-x)
                        ("M-y" . helm-show-kill-ring)
                        ("C-x b" . helm-mini)
                        ("C-x C-f" . helm-find-files)
                        ("C-c h" . helm-command-prefix)
                        ("C-`" . helm-resume)))
#+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c g" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src

*** Fullscreen magit

#+BEGIN_QUOTE
The following code makes magit-status run alone in the frame, and then
restores the old window configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+END_QUOTE
[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+begin_src emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+end_src

** Edit With Emacs

Editing input boxes from Chrome with Emacs. Pretty useful to keep all
significant text-writing on the web within emacs. I typically use this
with posts on Discourse, which has a post editor that overrides normal
Emacs key bindings with other functions. As such, ~markdown-mode~ is
used.

#+begin_src emacs-lisp
(use-package edit-server
  :ensure t
  :config
  (edit-server-start)
  (setq edit-server-default-major-mode 'markdown-mode)
  (setq edit-server-new-frame nil))
#+end_src

** Elfeed

#+begin_src emacs-lisp :tangle no
(use-package elfeed
  :ensure t
  :config (setq elfeed-feeds
                '("http://feeds.feedburner.com/gonintendo/news"
                  "http://usesthis.com/feed/")))
#+end_src

** Emacs IPython Notebook
#+begin_src emacs-lisp
(use-package ein
  :ensure t)
#+end_src

** Expand region

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-@" . er/expand-region))
#+end_src

** Floobits

Using [[https://floobits.com/][Floobits]] for code collaboration.

#+begin_src emacs-lisp :tangle no
(use-package floobits
  :ensure t)
#+end_src

** Flycheck

Still need to set up hooks so that flycheck automatically runs in
python mode, etc. js2-mode is already really good for the syntax
checks, so I probably don't need the jshint checks with flycheck for
it.

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :config (setq flycheck-html-tidy-executable "tidy5"))
#+end_src

*** Linter setups

Install the HTML5/CSS/JavaScript linters.

#+begin_src sh
brew tap homebrew/dupes
brew install tidy
npm install -g jshint
npm install -g csslint
#+end_src

** Gists

#+BEGIN_SRC emacs-lisp
(use-package gist
  :ensure t
  :commands gist-list)
#+END_SRC

** Macrostep

Macrostep allows you to see what Elisp macros expand to. Learned about
it from the [[https://www.youtube.com/watch?v%3D2TSKxxYEbII][package highlight talk for use-package]].

#+begin_src emacs-lisp
(use-package macrostep
  :ensure t
  :bind ("H-`" . macrostep-expand))
#+end_src

** Markdown mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+end_src

** Multiple cursors

We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :init (require 'multiple-cursors)
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("s-d"         . mc/mark-all-dwim)))
#+end_src

** Olivetti

#+begin_src emacs-lisp
(use-package olivetti
  :ensure t
  :bind ("s-<f6>" . olivetti-mode))
#+end_src

** Perspective

Workspaces in Emacs.

#+begin_src emacs-lisp :tangle no
(use-package perspective
  :ensure t
  :config (persp-mode))
#+end_src

** Projectile

#+BEGIN_QUOTE
Project navigation and management library for Emacs.
#+END_QUOTE
http://batsov.com/projectile/


#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands projectile-mode
  :config
  (progn
    (projectile-global-mode t)
    (setq projectile-enable-caching t)
    (use-package ag
      :commands ag
      :ensure t)))
