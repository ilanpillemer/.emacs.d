#+TITLE: Emacs Configuration
#+AUTHOR: Nelson Loyola

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley,
which is a fantastic way to manage package configurations.

I've gotten ideas for this document from the following:

- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's site]]
- [[https://github.com/wasamasa/dotemacs/blob/master/init.org][Wasamasa]]
- [[https://github.com/danielmai/.emacs.d][Daniel Mai]]'s configuration.

This file is used to generate ~config.el~ using ~org-babel~ in
~init.el~.

* Installing Emacs
** Ubuntu

I've installed Emacs from source
(=git://git.savannah.gnu.org/emacs.git=) and used the =emacs-24.5=
tag. I used the instructions provided by Xah Lee given [[http://ergoemacs.org/emacs/building_emacs_on_linux.html][here]], but first
the following command has to be run.

#+BEGIN_SRC sh
./autogen.sh
#+END_SRC

Then to compile and install, do the following.

#+BEGIN_SRC sh
./configure
make
sudo make install
#+END_SRC

* Personal Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Nelson Loyola"
      user-mail-address "nloyola@gmail.com")
#+END_SRC

* Customize settings

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC

* Font

** Installation

[[http://input.fontbureau.com/download/][Input Font]]: Install it on Ubuntu as follows:

#+BEGIN_SRC sh :tangle no
mv Input-Font.zip ~/.fonts
cd ~/.fonts
unzip Input-Font.zip
#+END_SRC

** Emacs config

And here's how to tell Emacs to use this font. Copy the following line to your
=~/.Xresources= file.

#+BEGIN_SRC sh :tangle no
Emacs.font: Input Mono Condensed-9
#+END_SRC

And then merge the setting to your X server resource database.

#+BEGIN_SRC sh :tangle no
xrdb -merge ~/.Xresources
#+END_SRC

* Sane defaults

** General

Some commands are disabled by default. They are enabled in our config
using the following:

#+BEGIN_SRC emacs-lisp
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)
(put 'erase-buffer 'disabled nil)
#+END_SRC

Sentences end with a single space.

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

Set the default major mode to =text-mode=. By default it's =fundamental= mode which is
not what we want. Also, use =text-mode= for the scratch buffer.

#+BEGIN_SRC emacs-lisp
(setq default-major-mode 'text-mode
      initial-major-mode 'text-mode)
#+END_SRC

Don't scroll to middle of page. Also, scroll line by line, without
scrolloff and try to keep point at the same visual place when
scrolling by page.

#+BEGIN_SRC emacs-lisp
(setq scroll-step 1
      scroll-conservatively 10000
      scroll-preserve-screen-position t)
#+END_SRC

Level of decoration {1 - 3}, t = max.

#+BEGIN_SRC emacs-lisp
(setq font-lock-maximum-decoration t)
#+END_SRC

For symlinks, automatically follow the link and visit the real file instead.

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks nil)
#+END_SRC

Make searches case insensitive.

#+BEGIN_SRC emacs-lisp
(setq-default case-fold-search t)
#+END_SRC

Autosave files are created between saves after a sufficient timeout in
the current directory for crash detection, they begin and end with
=#=.  Change this location to the emacs directory.

#+BEGIN_SRC emacs-lisp
(setq auto-save-list-file-prefix "~/.emacs.d/autosave/")
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosave/" t)))
#+END_SRC

Set line wrap at column 100.

#+BEGIN_SRC emacs-lisp
(setq fill-column 100)
#+END_SRC

Replace =yes or no= prompt with =y or n= prompt.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Use UTF-8 everywhere.

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

Use spaces instead of tabs.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

Delete the region when typing, just like as we expect nowadays.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

Highlight matching delimiters.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

Highlight matches in query-replace mode.

#+BEGIN_SRC emacs-lisp
(setq query-replace-highlight t)
#+END_SRC

Use visual line mode to display long lines.

#+BEGIN_SRC emacs-lisp
(global-visual-line-mode -1)
#+END_SRC

Replace the standard text representation of various identifiers/symbols
with a (arguably) more aesthetically pleasing representation.

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode +1)
#+END_SRC

Make completion buffers disappear after 10 seconds.

#+BEGIN_SRC emacs-lisp
(add-hook 'completion-setup-hook
          (lambda () (run-at-time 10 nil
                                  (lambda () (delete-windows-on "*Completions*")))))
#+END_SRC

Do not ask me to save files before compiling. Also scroll to the end
of the compilation buffer when it is opened.

#+BEGIN_SRC emacs-lisp
(setq compilation-ask-about-save nil
      compilation-scroll-output t)
#+END_SRC

Revert these files without asking.

#+BEGIN_SRC emacs-lisp
(setq revert-without-query '(".*"))
#+END_SRC

Default command when using ~grep~.

#+BEGIN_SRC emacs-lisp
(setq grep-command "grep -nH -r --include=\\* -e  .")
#+END_SRC

Middle-clicking is nice to paste, however it should not adjust point
and paste at the then adjusted point.

#+BEGIN_SRC emacs-lisp
(setq mouse-yank-at-point t)
#+END_SRC

Save clipboard data of other programs in the kill ring when possible.

#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC

Revert file buffers updated outside of emacs, unless I've made changes to
the buffer which I haven't saved.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** Disabled features

Turn off auto-save.

#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
#+END_SRC

Don't make any backup files.

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

Get rid of the menu bar.

#+BEGIN_SRC emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+END_SRC

Turn off the blinking cursor.

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode -1)
#+END_SRC

Don't use dialog boxes

#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
#+END_SRC

Don't want an audible bell.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC

** Frame Title

Display the running program and the selected buffer in the frame title.

#+BEGIN_SRC emacs-lisp
(setq frame-title-format
      '("" invocation-name ": " (:eval (replace-regexp-in-string
                                        "^ +" "" (buffer-name)))))
#+END_SRC

** End of file

Don't add new lines past end of file, and indicate unused lines at the
end of the window with a small image in the left fringe.

#+BEGIN_SRC emacs-lisp
(setq next-line-add-newlines nil)
(setq-default indicate-empty-lines t)
#+END_SRC

Add =\n= to end of file if required.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

** Key bindings

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-g g")         'goto-line)
(global-set-key (kbd "M-%")           'query-replace-regexp)
;;(global-set-key "\C-x\C-e"          'compile)
(global-set-key (kbd "C-x C-n")       'next-error)
(global-set-key (kbd "C-x C-i")       'c-indent-exp)

(global-set-key (kbd "<f1>")          'indent-for-tab-command)
(global-set-key [(shift f1)]          'indent-region)
(global-set-key (kbd "<f2>")          '(lambda () (interactive) (save-some-buffers t)))
(global-set-key [(shift f2)]          '(lambda () (interactive) (revert-buffer t t)))
(global-set-key [(shift f3)]          'helm-recentf)
(global-set-key [(meta shift f3)]     'sbt-grep)
(global-set-key [f4]                  'next-error)
(global-set-key [f5]                  'compile)
(global-set-key [(shift f5)]          'toggle-truncate-lines)
(global-set-key [(shift f11)]         'eval-region)
(global-set-key [(control shift f11)] 'align-regexp)
#+END_SRC

** Line numbers.

#+BEGIN_SRC emacs-lisp
(dolist (mode-hook '(text-mode-hook prog-mode-hook))
  (add-hook mode-hook
            (lambda ()
              (linum-mode t))))
#+END_SRC

** Mode line

Display the column number in the mode line.

#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC

Use the directory name to make buffer names unique.

#+BEGIN_SRC emacs-lisp
(setq uniquify-buffer-name-style 'forward)
#+END_SRC

Do not show thees modes in the mode line.

#+BEGIN_SRC emacs-lisp
(diminish 'visual-line-mode)
(diminish 'abbrev-mode)
#+END_SRC
** Remove trailing whitespace

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Shell

#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/zsh")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)

(defun my-term-use-utf8 ()
  (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
(add-hook 'term-exec-hook 'my-term-use-utf8)

(defun my-term-paste (&optional string)
  (interactive)
  (process-send-string
   (get-buffer-process (current-buffer))
   (if string string (current-kill 0))))

(defun my-term-hook ()
  (goto-address-mode)
  (define-key term-raw-map "\C-y" 'my-term-paste)
  (let ((base03  "#002b36")
        (base02  "#073642")
        (base01  "#586e75")
        (base00  "#657b83")
        (base0   "#839496")
        (base1   "#93a1a1")
        (base2   "#eee8d5")
        (base3   "#fdf6e3")
        (yellow  "#b58900")
        (orange  "#cb4b16")
        (red     "#dc322f")
        (magenta "#d33682")
        (violet  "#6c71c4")
        (blue    "#268bd2")
        (cyan    "#2aa198")
        (green   "#859900"))
    (setq ansi-term-color-vector
          (vconcat `(unspecified ,base02 ,red ,green ,yellow ,blue
                                 ,magenta ,cyan ,base2)))
    (my-term-use-utf8)
    ))

(add-hook 'term-exec-hook 'my-term-hook)
#+END_SRC
** Text mode

#+BEGIN_SRC emacs-lisp
(setq text-mode-hook
      '(lambda ()
         (turn-on-auto-fill)            ; Enable automatic line wrapping.
         (setq-default indent-tabs-mode nil)))    ; Use real tabs.
#+END_SRC
* Packages bundled with Emacs

** =bookmark=

Prefer saving this file somewhere other than the default.

#+BEGIN_SRC emacs-lisp
(setq bookmark-default-file "~/.emacs.d/etc/bookmarks")
#+END_SRC

** =dired=

Make dired show directories first. Dired buffers should auto revert
and not give any use feedback (source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]).

#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-aBhl  --group-directories-first")
(add-hook 'dired-mode-hook 'auto-revert-mode)
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+END_SRC

** =ediff=
#+BEGIN_SRC emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain
      ediff-diff-options "-bw")
#+END_SRC
** =emacsclient=

#+BEGIN_SRC emacs-lisp
(use-package edit-server
  :ensure t
  :if window-system
  :init
  (add-hook 'after-init-hook 'server-start t)
  (add-hook 'after-init-hook 'edit-server-start t))
#+END_SRC

** =ibuffer=

ibuffer is the improved version of list-buffers.

#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+END_SRC

** =org-mode=

First some UI and editing tweaks.

Changing the ellipsis idea comes from [[http://endlessparentheses.com/changing-the-org-mode-ellipsis.html][Artur Malabarba]].

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ⤵"
      org-catch-invisible-edits 'error
      org-startup-indented t
      org-cycle-include-plain-lists 'integrate
      org-return-follows-link t
      org-M-RET-may-split-line nil
      org-src-fontify-natively t
      org-src-preserve-indentation t
      org-enforce-todo-dependencies t
      org-enforce-todo-checkbox-dependencies t
      org-link-frame-setup '((file . find-file)))
#+END_SRC

*** Org activation bindings

Set up some global key bindings that integrate with Org Mode features.

#+BEGIN_SRC emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
#+END_SRC

*** Org agenda

Learned about [[https://github.com/sachac/.emacs.d/blob/83d21e473368adb1f63e582a6595450fcd0e787c/Sacha.org#org-agenda][this =delq= and =mapcar= trick from Sacha Chua's config]].

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    '("~/Dropbox/todo.org"
                      "~/Dropbox/todo.org"))))
#+END_SRC

*** Org capture

#+BEGIN_SRC emacs-lisp
(bind-key "C-c c" 'org-capture)
(setq org-default-notes-file "~/Dropbox/notes.org")
#+END_SRC

*** Org setup

Speed commands are a nice and quick way to perform certain actions
while at the beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info%20"(org)%20speed%20keys")][the documentation for
speed keys in Org mode]].

#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width 550)
#+END_SRC

*** Org tags

The default value is -77, which is weird for smaller width windows.
I'd rather have the tags align horizontally with the header. 45 is a
good column number to do that.

#+BEGIN_SRC emacs-lisp
(setq org-tags-column 45)
#+END_SRC

*** Org babel languages

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)
   (calc . t)
   (latex . t)
   (java . t)
   (ruby . t)
   (scheme . t)
   (sh . t)
   (sqlite . t)
   (js . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for these languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC

*** Org babel/source blocks

Have source blocks properly syntax highlighted and with the editing
popup window staying within the same window so all the windows don't
jump around. Also, having the top and bottom trailing lines in the
block is a waste of space, so we can remove them.

Fontification doesn't work with markdown mode when the block is
indented after editing it in the org src buffer---the leading #s for
headers don't get fontified properly because they appear as Org
comments.

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-tab-acts-natively t)
#+END_SRC

** =re-builder=

Interactive preview for RE construction.

It's important to note that there's three flavours of regular
expressions encountered in Emacs.  The =read= syntax is most
reminiscent of other RE dialects, but only used in prompts.  The
=string= syntax is used in code doubles the amount of backslashes as
the RE strings are passed through the reader which removes the
extraneous ones.  Finally, there's the ~rx~ macro one can use for
writing lispy RE.

All listed RE syntaxes are supported by =re-builder=. For whatever
reason though the =read= syntax is default. I prefer having the
=string= syntax as default.

#+BEGIN_SRC emacs-lisp
(setq reb-re-syntax 'string)
#+END_SRC

** =recentf=

Recentf is a minor mode that builds a list of recently opened files.
This list is is automatically saved across Emacs sessions.

Prefer saving the history of opened files somewhere other than the default.

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :init
  (progn
    (setq recentf-save-file "~/.emacs.d/etc/recentf"))
  :config
  (progn
    (recentf-mode 1)
    (setq recentf-max-saved-items 100)))
#+END_SRC

** =savehist=

The history of prompts like =M-:= can be saved, but let's change its
save file and history length first. Also save search entries.

#+BEGIN_SRC emacs-lisp
(setq savehist-additional-variables '(search-ring regexp-search-ring)
      savehist-file "~/.emacs.d/etc/savehist"
      history-length 150)
(savehist-mode)
#+END_SRC

** =save-place=

Remember position in a file.

#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :init
  (progn
    (setq save-place-file "~/.emacs.d/etc/saveplace"
          save-place-forget-unreadable-files nil)
    (setq-default save-place t)))
#+END_SRC

** =shell=

#+BEGIN_SRC emacs-lisp
(bind-key "C-x m" 'shell)
(bind-key "C-x M" 'ansi-term)
#+END_SRC

** =tramp=

#+BEGIN_SRC emacs-lisp :tangle no
(use-package tramp)
#+END_SRC

** =windmove=

=windmove= provides useful commands for moving window focus by
direction.

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings 'meta)
#+END_SRC

** =winner-mode=

Window management. ~C-c left (winner-undo)~ undoes the last window
configuration change. Redo the changes using ~C-c right
(winner-redo)~. Also move from window to window using Meta and the
direction keys.

#+BEGIN_SRC emacs-lisp
(winner-mode t)
#+END_SRC

** =whitespace=

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :bind ("S-<f10>" . whitespace-mode))
#+END_SRC

* ELPA packages

These are the packages that are not built into Emacs.

** [[https://github.com/abo-abo/ace-window][ace-window]]

A package that uses the same idea from ace-jump-mode for
buffer navigation, but applies it to windows. The default keys are
1-9, but it's faster to access the keys on the home row, so that's
what I have them set to (with respect to Dvorak, of course).

#+BEGIN_SRC emacs-lisp
(use-package ace-window)
#+END_SRC

** [[https://github.com/abo-abo/avy][avy]]

A quick way to jump around text in buffers.

#+BEGIN_SRC emacs-lisp
  (use-package avy
               :bind (("C-c SPC" . avy-goto-char)
                      ("C-'" . avy-goto-char-2)
                      ("M-g M-g" . avy-goto-line)))
#+END_SRC

** [[https://github.com/Malabarba/beacon][beacon]]

Never lose your cursor again

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (progn
    (setq beacon-push-mark 35)
    (setq beacon-color "#666600"))
  :config (beacon-mode 1)
  )
#+END_SRC

** [[https://github.com/jorgenschaefer/circe][circe]]

#+BEGIN_SRC emacs-lisp :tangle no
(use-package circe
  :ensure t
  :config (setq circe-default-nick "chucho"
                circe-default-user "chucho"
                circe-default-realname "chucho"
                circe-default-part-message "Bye"
                circe-default-quit-message "Bye"
                circe-network-options '(("Freenode"
                                         :tls t
                                         :channels ("#emacs")
                                         ))))
#+END_SRC

** [[https://github.com/ankurdave/color-identifiers-mode][color-identifiers]]

Color Identifiers is a minor mode for Emacs that highlights each source code identifier uniquely
based on its name.

#+BEGIN_SRC emacs-lisp
(use-package color-identifiers-mode
  :ensure t
  :diminish color-identifiers-mode
  :config
  (progn
    (add-hook 'after-init-hook 'global-color-identifiers-mode)))
#+END_SRC

** [[https://github.com/company-mode/company-mode][company-mode]]

Complete anything.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :config
  (progn
    (add-hook 'after-init-hook 'global-company-mode)
    (global-set-key (kbd "M-/") 'company-complete-common)
    (use-package company-tern)
    ))
#+END_SRC

** [[https://github.com/senny/emacs-eclim][emacs-eclim]]

Provides Emacs with some Eclipse features for Java development. Eclim has to be installed first and
can be downloaded from [[http://eclim.org/install.html][here]].

#+BEGIN_SRC emacs-lisp
(use-package eclim
  :load-path "/home/nelson/src/github/elisp/emacs-eclim"
  :ensure emacs-eclim
  :diminish eclim-mode
  :init (use-package cl)
  :config
  (progn
    (add-to-list 'eclim-eclipse-dirs (expand-file-name "~/apps/eclipse/mars/eclipse"))
    ;;(global-eclim-mode)
    (use-package eclimd)
    (use-package company)
    (use-package company-emacs-eclim)
    (company-emacs-eclim-setup)
    (global-company-mode t)
    (add-hook 'java-mode-hook (lambda() (eclim-mode t)))
    (setq eclim-auto-save t
          eclimd-wait-for-process nil
          eclimd-default-workspace "~/workspace/"
          help-at-pt-display-when-idle t
          help-at-pt-timer-delay 0.1

          eclim-executable (or (executable-find "eclim")
                               (concat (substitute-in-file-name "$HOME/apps/eclipse/rcp/mars/eclipse/eclim")))
          eclimd-executable (or (executable-find "eclimd")
                                (concat (substitute-in-file-name "$HOME/apps/eclipse/rcp/mars/eclipse/eclimd"))))
    ;; Call the help framework with the settings above & activate eclim-mode
    (help-at-pt-set-timer)

    ;; keep consistent which other auto-complete backend.
    (custom-set-faces
     '(ac-emacs-eclim-candidate-face ((t (:inherit ac-candidate-face))))
     '(ac-emacs-eclim-selection-face ((t (:inherit ac-selection-face)))))

    (defun nl/eclim-run-configuartion (configuration-name)
      "Runs the configuration given in CONFIGURATION-NAME in the compilation buffer."
      (interactive (list (eclim-java-run--ask-which-configuration)))
      (let* ((current-directory default-directory)
             (configurations (eclim-java-run--load-configurations (eclim-project-name)))
             (configuration (eclim-java-run--configuration configuration-name configurations))
             (project-dir (eclim-java-run--project-dir (eclim-project-name)))
             (classpath (eclim/java-classpath (eclim-project-name)))
             (command (eclim-java-run--command configuration (eclim-java-run--java-vm-args classpath))))
        (setq default-directory project-dir)
        (compile command)
        ;; restore the buffer's directory
        (setq default-directory current-directory)
        ))
    ))
#+END_SRC

** [[https://github.com/magnars/expand-region.el][expand-region]]

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+END_SRC

** [[http://www.emacswiki.org/emacs/fic-mode.el][fic-mode]]

Show FIXME/TODO/BUG/KLUDGE in special face only in comments and
strings.

#+BEGIN_SRC emacs-lisp
(use-package fic-mode
  :ensure t
  :config
  (progn
    (add-hook 'c++-mode-hook 'turn-on-fic-mode)
    (add-hook 'c-mode-hook 'turn-on-fic-mode)
    (add-hook 'java-mode-hook 'turn-on-fic-mode)
    (add-hook 'vala-mode-hook 'turn-on-fic-mode)
    (add-hook 'python-mode-hook 'turn-on-fic-mode)
    ))
#+END_SRC

** [[http://www.emacswiki.org/emacs/framemove.el][framemove]]

Allow windmove to jump between frames.

#+BEGIN_SRC emacs-lisp
(use-package framemove
  :ensure t
  :config (setq framemove-hook-into-windmove t)
  )
#+END_SRC

** [[https://github.com/flycheck/flycheck][flycheck]]

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :diminish flycheck-mode
  :config
  (progn
    (add-hook 'after-init-hook #'global-flycheck-mode)
    (setq flycheck-standard-error-navigation nil)))

(use-package flycheck-protobuf
  :config
  (progn
    (add-to-list 'flycheck-checkers 'protobuf-protoc-reporter t)
    )
  ))
#+END_SRC

** [[https://github.com/leoliu/ggtags][ggtags]]

Generate tags on command line with ~gtags~.
Updte tags on command line with ~global -u~.

#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :ensure t
  :commands ggtags-mode)
#+END_SRC

** [[https://github.com/jacobono/emacs-gradle-mode][emacs-gradle-mode]]

#+BEGIN_SRC emacs-lisp
(use-package gradle-mode
  :ensure t
  :diminish gradle-mode
  :init
  (progn
    (gradle-mode 1)))
#+END_SRC

** [[https://github.com/pidu/git-timemachine][git-timemachine]]

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t
  :commands git-timemachine)
#+END_SRC

** [[https://github.com/camdez/goto-last-change.el][goto-last-change]]

#+BEGIN_SRC emacs-lisp
      (use-package goto-last-change
        :ensure t
        :config
        (progn
          (autoload 'goto-last-change "goto-last-change"
            "Set point to the position of the last change." t)

          (global-set-key "\C-x\C-\\" 'goto-last-change)
          ))
#+END_SRC

** [[https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes][groovy-mode]]

Required for gradle build files.

#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
               :ensure t)
#+END_SRC
** [[https://github.com/kai2nenobu/guide-key][guide-key]]

Guide the following key bindings automatically and dynamically.

#+BEGIN_SRC emacs-lisp
(use-package guide-key
  :ensure t
  :diminish guide-key-mode
  :config
  (progn
    (setq guide-key/guide-key-sequence '("C-x r" "C-c p" "C-h" "C-c h"))
    (guide-key-mode 1)
  ))
#+END_SRC

** [[https://github.com/emacs-helm/helm][helm]]
*** Helm Config

GNU Global and projectile: use ~C-c p R~ to regenerate tag file.

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :commands (helm-config helm-eshell helm-files helm-grep helm-projectile)
  :diminish helm-mode
  :init (progn
          ;; must set before helm-config, otherwise helm uses the default
          ;; prefix "C-x c", which is inconvenient because you can
          ;; accidentially press "C-x C-c"
          (setq helm-command-prefix-key "C-c h")
          (helm-projectile-on)
          (helm-flx-mode +1)

          (setq helm-ff-newfile-prompt-p nil
                ;;helm-M-x-fuzzy-match t ; using flx for now
                helm-google-suggest-use-curl-p t
                ;; scroll 4 lines other window using M-<next>/M-<prior>
                helm-scroll-amount 4
                ;; do not display invisible candidates
                helm-quick-update t
                ;; be idle for this many seconds, before updating in delayed sources.
                helm-idle-delay 0.01
                ;; be idle for this many seconds, before updating candidate buffer
                helm-input-idle-delay 0.01
                ;; search for library in `require` and `declare-function` sexp.
                helm-ff-search-library-in-sexp t

                helm-buffers-favorite-modes (append helm-buffers-favorite-modes
                                                    '(picture-mode artist-mode))
                ;; limit the number of displayed canidates
                helm-candidate-number-limit 100
                ;; show all candidates when set to 0
                helm-M-x-requires-pattern 0
                helm-ff-file-name-history-use-recentf t
                ;; move to end or beginning of source when reaching top or bottom of source.
                helm-move-to-line-cycle-in-source t
                ;; Needed in helm-buffers-list
                ido-use-virtual-buffers t
                ;; fuzzy matching buffer names when non--nil, useful in helm-mini that lists buffers
                helm-buffers-fuzzy-matching t
                ;; truncate long lines
                helm-truncate-lines t
                helm-autoresize-min-height 30
                helm-autoresize-max-height 30
                helm-display-header-line nil
                helm-buffer-max-length 45
                helm-yas-display-key-on-candidate t)

          ;; Save current position to mark ring when jumping to a different place
          (add-hook 'helm-goto-line-before-hook 'helm-save-current-pos-to-mark-ring)
          (helm-mode)
          (helm-autoresize-mode 1))
  :bind (("M-x" . helm-M-x)
         ("M-y" . helm-show-kill-ring)
         ("C-x b" . helm-mini)
         ("C-x C-f" . helm-find-files)
         ("C-`" . helm-resume)))
#+END_SRC

*** Helm Search

[[http://www.gnu.org/software/grep/][grep]] is very fast, but not the best tool for code search, especially
not within compressed files. That's why I'll go for [[https://github.com/ggreer/the_silver_searcher/][ag]] instead, its
=-z= option enables the usage of the very great [[http://libarchive.org/][libarchive]]. For =helm=
to recognize the matches properly I need to enable line numbers and
columns in its output, something the =--vimgrep== option (the irony)
does. Another subtle hack hidden in here is deliberately using the
recursing variant for both types of searches, this might break
something, but so far hasn't shown any obvious side-effects

#+BEGIN_SRC emacs-lisp
(setq helm-grep-default-command "ag --vimgrep -z %p %f"
      helm-grep-default-recurse-command "ag --vimgrep -z %p %f")
#+END_SRC

*** Helm Key bindings

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'helm-files
  ;; rebind tab to do persistent action
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  ;; make TAB works in terminal
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
  ;; list actions using C-z
  (define-key helm-map (kbd "C-z")  'helm-select-action)
  (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
  (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
  (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward))
#+END_SRC

*** Helm Window config

So that helm windows shows at the bottom.

- from http://www.reddit.com/r/emacs/comments/345vtl/make_helm_window_at_the_bottom_without_using_any/
- see also http://www.lunaryorn.com/2015/04/29/the-power-of-display-buffer-alist.html

#+BEGIN_SRC emacs-lisp
;; (with-eval-after-load 'helm
;;   (cond (window-system
;;          (add-to-list 'display-buffer-alist
;;                       `("^\\*[Hh]elm"
;;                         (display-buffer-in-side-window)
;;                         (inhibit-same-window . nil)
;;                         (reusable-frames . visible)
;;                         (side            . bottom)
;;                         (window-height   . 0.15)))
;;          )))
#+END_SRC

*** Helm Other

Highlighting of token matches is a tad slow, let's speed it up.

#+BEGIN_SRC emacs-lisp
(setq helm-mp-highlight-delay 0.3)
#+END_SRC

I don't know why, but helm tries doing window management.  Please
stop:

#+BEGIN_SRC emacs-lisp
(setq helm-display-function 'pop-to-buffer)
#+END_SRC

** [[https://github.com/syohex/emacs-helm-ag][helm-ag]]

#+BEGIN_SRC emacs-lisp
(use-package helm-ag :ensure t :commands helm-ag)
#+END_SRC

** [[https://github.com/emacs-jp/helm-c-yasnippet][helm-c-yasnippet]]

#+BEGIN_SRC emacs-lisp
(use-package helm-c-yasnippet
  :ensure t
  :commands helm-yas-complete
  ;;:init (use-package yasnippet)
  :config (global-set-key (kbd "C-c y") 'helm-yas-complete))
#+END_SRC

** [[https://github.com/PythonNut/helm-flx][helm-flx]]

#+BEGIN_SRC emacs-lisp
(use-package helm-flx :ensure t :commands helm-flx-mode)
#+END_SRC

** [[https://github.com/syohex/emacs-helm-gtags][helm-gtags]]

#+BEGIN_SRC emacs-lisp
(use-package helm-gtags
  :ensure t
  :commands (helm-gtags-find-tag helm-gtags-find-rtag)
  :bind (("M-." . helm-gtags-find-tag)
         ("M-," . helm-gtags-find-rtag)))
#+END_SRC

** [[https://github.com/bbatsov/projectile][helm-projectile]]

Included with Projectile.

#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :ensure t
  :commands (helm-projectile-on)
  :bind (("C-c p h" . helm-projectile))
  :config
  (progn
    (setq projectile-remember-window-configs t
          projectile-switch-project-action 'projectile-dired
          projectile-completion-system 'default
          projectile-enable-caching nil
          compilation-read-command t ; do prompt for a compilation command
          projectile-use-git-grep t
          )

    (projectile-global-mode)
    (setq projectile-completion-system 'helm)
    ))
#+END_SRC

** [[https://github.com/ShingoFukuyama/helm-swoop][helm-swoop]]

#+BEGIN_SRC emacs-lisp
(use-package helm-swoop :ensure t)
#+END_SRC

** [[https://github.com/boyw165/hl-anything][hl-anything]]

Not used for now since it breaks ERC font lock.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package hl-anything
  :ensure t
  :config
  (progn
    (hl-highlight-mode 1)
    ;; (hl-setup-default-advices nil)
    ;; (hl-setup-customizable-advices nil)
    ;; (remove-hook 'kill-emacs-hook 'hl-save-highlights)
    ))
#+END_SRC

** [[https://github.com/nflath/hungry-delete][hungry-delete]]

So that hungry deletion can be used in all modes.

#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
               :ensure t
               :config
               (progn
                 (global-hungry-delete-mode)
                 ))
#+END_SRC

** [[https://github.com/abo-abo/hydra][hydra]]

This package can be used to tie related commands into a family of
short bindings with a common prefix - a Hydra.

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t
  :init
  (progn
    (use-package cl-lib)
    (use-package lv)
    (use-package ace-window :ensure t)
    (use-package avy :ensure t)
    (use-package key-chord
      :ensure t
      :config (key-chord-mode 1))
    )
  :config
  (progn
    ;; http://oremacs.com/2015/01/29/more-hydra-goodness/

    (defun hydra-universal-argument (arg)
      (interactive "P")
      (setq prefix-arg (if (consp arg)
                           (list (* 4 (car arg)))
                         (if (eq arg '-)
                             (list -4)
                           '(4)))))

    (defhydra hydra-window (global-map "C-M-o")
      "window"
      ("h" windmove-left "left")
      ("j" windmove-down "down")
      ("k" windmove-up "up")
      ("l" windmove-right "right")
      ("a" ace-window "ace")
      ("u" hydra-universal-argument "universal")
      ("s" (lambda nil (interactive) (ace-window 4)) "swap")
      ("d" (lambda nil (interactive) (ace-window 16)) "delete"))

    (key-chord-define-global "yy" 'hydra-window/body)

    ;;
    ;; Taken from http://doc.rix.si/org/fsem.html
    ;;
    (defhydra hydra-zoom (global-map "C-c z")
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out"))
    )

  (defhydra hydra-eclim (:color teal
                                :hint nil)
    "
Eclim:
 ╭─────────────────────────────────────────────────────┐
 │ Java                                                │       Problems
╭┴─────────────────────────────────────────────────────┴────────────────────────────────────╯
  _d_: Show Doc             _i_: Implement (Override)          _p_: Show Problems
  _g_: Make getter/setter  _fd_: Find Declarations             _c_: Show Corrections
  _o_: Organize Imports    _fr_: Find References               _r_: Buffer Refresh
  _h_: Hierarchy            _R_: Refactor
  _s_: Semantic
Project
──────────────────
_j_: Jump to proj
_b_: Create
_k_: Import Proj
_u_: Update
"
    ("d"   eclim-java-show-documentation-for-current-element)
    ("g"   eclim-java-generate-getter-and-setter)
    ("o"   eclim-java-import-organize)
    ("h"   eclim-java-call-hierarchy)
    ("s"   helm-semantic)
    ("i"   eclim-java-implement)
    ("fd"  eclim-java-find-declaration)
    ("fr"  eclim-java-find-references)
    ("R"   eclim-java-refactor-rename-symbol-at-point)
    ("p"   eclim-problems)
    ("c"   eclim-problems-correct)
    ("r"   eclim-problems-buffer-refresh)
    ("j"   eclim-project-goto)
    ("b"   eclim-project-create)
    ("k"   eclim-project-import)
    ("u"   (lambda () (interactive) (eclim-project-update (eclim-project-name))))
    ("q"   nil "cancel" :color blue))

  (define-key eclim-mode-map (kbd "C-c e") 'hydra-eclim/body))
#+END_SRC

** [[https://github.com/joddie/macrostep][macrostep]]

Macrostep allows you to see what Elisp macros expand to. Learned about
it from the [[https://www.youtube.com/watch?v%3D2TSKxxYEbII][package highlight talk for use-package]].

#+BEGIN_SRC emacs-lisp
(use-package macrostep
  :ensure t)
#+END_SRC

** [[https://github.com/magit/magit][magit]]

A great interface for git projects. It's much more pleasant to use than the git interface on the
command line. Use an easy keybinding to access magit.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (progn
     (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
     (setq magit-push-always-verify nil)
     ))
#+END_SRC

*** Fullscreen magit

#+BEGIN_QUOTE
The following code makes magit-status run alone in the frame, and then restores the old window
configuration when you quit out of magit.

No more juggling windows after commiting. It's magit bliss.
#+END_QUOTE
[[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

#+BEGIN_SRC emacs-lisp
;; full screen magit-status
(defadvice magit-status (around magit-fullscreen activate)
  (window-configuration-to-register :magit-fullscreen)
  ad-do-it
  (delete-other-windows))

(defun magit-quit-session ()
  "Restores the previous window configuration and kills the magit buffer"
  (interactive)
  (kill-buffer)
  (jump-to-register :magit-fullscreen))
#+END_SRC

** [[https://github.com/defunkt/markdown-mode][markdown-mode]]

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+END_SRC
** [[https://github.com/oneKelvinSmith/monokai-emacs][monokai-emacs]]

TextMate like theme.

#+BEGIN_SRC emacs-lisp
(use-package monokai-theme
  :ensure t
  :config
  (progn
    (load-theme 'monokai t)
    (setq frame-background-mode `dark)
    (setq monokai-use-variable-pitch nil)))
#+END_SRC

** [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]

We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

#+BEGIN_SRC emacs-lisp :tangle no
(use-package multiple-cursors
  :ensure t
  :init (require 'multiple-cursors)
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C-<"     . mc/mark-all-like-this)
         ("C-!"         . mc/mark-next-symbol-like-this)
         ("s-d"         . mc/mark-all-dwim)))
#+END_SRC

** [[https://github.com/nex3/perspective-el][perspective]]

This package provides tagged workspaces.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package perspective
  :ensure t
  :config (persp-mode))
#+END_SRC

** [[https://github.com/bbatsov/projectile][projectile]]

#+BEGIN_QUOTE
Project navigation and management library for Emacs.
#+END_QUOTE
http://batsov.com/projectile/


#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :commands projectile-mode
    :config
    (progn
      (setq projectile-indexing-method 'alien
            projectile-remember-window-configs t
            projectile-switch-project-action 'projectile-dired
            projectile-completion-system 'default
            projectile-enable-caching nil
            compilation-read-command nil ; do not prompt for a compilation command
            )

      (projectile-global-mode)
      (setq projectile-completion-system 'helm)

      (use-package ag
        :commands ag
        :ensure t)))
#+END_SRC

** [[https://github.com/milkypostman/powerline][powerline]]

#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :config
  (progn
    (setq powerline-arrow-shape 'arrow14)
    (setq powerline-default-separator-dir '(right . left))

    (custom-set-faces
     '(mode-line ((t (:foreground "#030303" :background "#6b6b6b" :box nil))))
     '(mode-line-inactive ((t (:foreground "#f9f9f9" :background "#6b6b6b" :box nil)))))

    (setq powerline-color1 "#49483E")
    (setq powerline-color2 "#333333")
    (powerline-default-theme)
    ))
#+END_SRC

** [[https://melpa.org/#/python-mode][python-mode]]

Integrates with IPython.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package python-mode
    :ensure t)
#+END_SRC

** [[https://github.com/emacsmirror/revive][revive]]

Using revive

- use ~M-x save-current-configuration~ to save window configuration.
- use ~M-x resume~ to load window configuration.

#+BEGIN_SRC emacs-lisp
(use-package revive
  :ensure t)
#+END_SRC
** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

Highlight brackets according to their depth

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t)
#+END_SRC

** [[https://github.com/ieure/scratch-el][scratch]]

Convenient package to create =*scratch*= buffers that are based on the current buffer's major mode.
This is more convienent than manually creating a buffer to do some scratch work or reusing the
initial =*scratch*= buffer.

#+BEGIN_SRC emacs-lisp
(use-package scratch
  :ensure t)
#+END_SRC

** [[https://github.com/wasamasa/shackle][shackle]]

Declarative popup window rules.

#+BEGIN_SRC emacs-lisp
(use-package shackle
  :ensure t
  :config
  (progn
    (setq shackle-rules
          '((svg-2048-mode :same t)
            ("*Help*" :align t :ratio 0.4 :select t)
            ("\\`\\*[Hh]elm.*?\\*\\'" :regexp t :align 'bottom :ratio 0.4)
            ((compilation-mode "\\`\\*firestarter\\*\\'"
                               "\\`\\*magit-diff: .*?\\*\\'") :regexp t :noselect t)
            ((inferior-scheme-mode "*shell*" "*eshell*") :popup t))
          shackle-default-rule '(:select t)
          shackle-inhibit-window-quit-on-same-windows t)
    (shackle-mode)
    ))
#+END_SRC

** [[https://github.com/Fuco1/smartparens][smartparens]]

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :config (progn (require 'smartparens-config)
                 (smartparens-global-mode t)))
#+END_SRC


*** Smartparens org mode

Set up some pairings for org mode markup. These pairings won't
activate by default; they'll only apply for wrapping regions.

#+BEGIN_SRC emacs-lisp
(sp-local-pair 'org-mode "~" "~" :actions '(wrap))
(sp-local-pair 'org-mode "/" "/" :actions '(wrap))
(sp-local-pair 'org-mode "*" "*" :actions '(wrap))
#+END_SRC

** [[https://github.com/mickeynp/smart-scan][smart-scan]]

Quickly jumps between other symbols found at point in Emacs.
http://www.masteringemacs.org/article/smart-scan-jump-symbols-buffer

#+BEGIN_SRC emacs-lisp
(use-package smartscan
  :ensure t
  :config (global-smartscan-mode 1))
#+END_SRC

** [[https://melpa.org/#/transpose-frame][transpose-frame]]

Allows for transposing window arrangements.

#+BEGIN_SRC emacs-lisp
(use-package transpose-frame
  :ensure t
  :bind ("S-M-t" . transpose-frame))
#+END_SRC

** [[http://melpa.org/#/undo-tree][undo-tree]]

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :commands global-undo-tree-mode)
#+END_SRC

** [[https://github.com/mrkkrp/vimish-fold][vimish-fold]]

#+BEGIN_SRC emacs-lisp :tangle no
(use-package vimish-fold
  :ensure t
  :config (vimish-fold-global-mode 1)
  )
#+END_SRC

** [[https://github.com/benma/visual-regexp.el][visual-regexp]]

#+BEGIN_SRC emacs-lisp
(use-package visual-regexp
  :ensure t
  :init
  (use-package visual-regexp-steroids :ensure t)
  :bind (("C-c r" . vr/replace)
         ("C-c q" . vr/query-replace)
         ("C-c m" . vr/mc-mark) ; Need multiple cursors
         ("C-M-r" . vr/isearch-backward)
         ("C-M-s" . vr/isearch-forward)))
#+END_SRC

** [[https://github.com/capitaomorte/yasnippet][yasnippet]]

It takes a few seconds to load and I don't need them immediately when
Emacs starts up, so we can defer loading yasnippet until there's some
idle time.

Large collection of snippets: [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]].

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :config
  (progn
    ;;(setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
    (yas-reload-all)
    (yas-global-mode)))
#+END_SRC

** [[https://github.com/fxbois/web-mode][web-mode]]

#+BEGIN_SRC emacs-lisp :tangle no
(use-package web-mode
  :ensure t)
#+END_SRC
** [[https://github.com/purcell/whole-line-or-region][whole-line-or-region]]

#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
  :ensure t
  :diminish whole-line-or-region-mode
  :config (whole-line-or-region-mode t))
#+END_SRC

** [[https://github.com/jinzhu/zeal-at-point][zeal-at-point]]

Search the word at point with Zeal

Zeal is a simple offline API documentation browser inspired by Dash
(OS X app), available for Linux and Windows.

#+BEGIN_SRC emacs-lisp
(use-package zeal-at-point
  :ensure t
  ;;:diminish
  :commands zeal-at-point)
#+END_SRC

* Computer-specific settings

Load some computer-specific settings, such as the name and and email address. The way the settings
are loaded is based off of [[https://github.com/magnars/.emacs.d][Magnar Sveen's]] config.

#+BEGIN_SRC emacs-lisp
(defvar nl/user-settings-dir nil
  "The directory with user-specific Emacs settings for this
  user.")

;; Settings for currently logged in user
(require 's)
(setq nl/user-settings-dir
      (concat user-emacs-directory
              "users/"
              (s-trim (shell-command-to-string "hostname -s"))))
(add-to-list 'load-path nl/user-settings-dir)

;; Load settings specific for the current user
(when (file-exists-p nl/user-settings-dir)
  (mapc 'load (directory-files nl/user-settings-dir nil "^[^#].*el$")))
#+END_SRC

* Languages

** Identation config

Use spaces instead of ~\t~ character.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

A way to set up indentation for all programming modes. Taken from
[[http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html][here]].

#+BEGIN_SRC emacs-lisp
(defun nl/setup-indent (n)
  ;; java/c/c++
  (setq c-basic-offset n)
  ;; web development
  (setq coffee-tab-width n) ; coffeescript
  (setq javascript-indent-level n) ; javascript-mode
  (setq js-indent-level n) ; js-mode
  (setq js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
  (setq web-mode-markup-indent-offset n) ; web-mode, html tag in html file
  (setq web-mode-css-indent-offset n) ; web-mode, css in html file
  (setq web-mode-code-indent-offset n) ; web-mode, js code in html file
  (setq css-indent-offset n) ; css-mode
  )
#+END_SRC

** Programming mode hook.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)

(defun my-common-prog-mode-settings ()
  "Enables settings common between programming language modes."
  (progn
    (nl/setup-indent 3) ; indent 2 spaces width
    ;
    ; Set tab and CR/LF keys to call their corresponding more-general
    ; functions.  This needs to be here to override the settings of some modes
    ; (e.g. c++-mode changes the tab key to do a re-indent).
    ;
    (local-set-key "\t" 'tab-to-tab-stop)
    (local-set-key "\n" 'newline-and-indent)
    (local-set-key "\r" 'newline-and-indent)
    ;
    ; Set paragraph/comment auto-formatting to wrap at column 100.
    ;
    (set-fill-column 100)
    ;
    ; Set the comment column to zero so that lisp comment lines will act like
    ; C++ comments (i.e. line up with the code), and not automatically indent
    ; to column 50.
    ;
    (setq comment-column 0)
    (rainbow-delimiters-mode) ;; See unbalanced parens
    (push '(">=" . ?≥) prettify-symbols-alist)
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '("->" . ?→) prettify-symbols-alist)
    ))

(setq makefile-mode-hook 'my-common-prog-mode-settings)
(setq sh-mode-hook       'my-common-prog-mode-settings)
#+END_SRC
** C

#+BEGIN_SRC emacs-lisp
(defconst nelson-c-style
  '((c-tab-always-indent . t)
    (c-set-style "K&R")
    (c-offsets-alist . ((statement-block-intro . +)
                        (substatement-open     . 0)
                        (label                 . 0)
                        (case-label            . +)
                        (statement-cont        . +)
                        )))
  "Nelson programming style.")

;; Customizations for all of c-mode, c++-mode, and objc-mode
(defun my-c-mode-common-hook ()
  ;; add my personal style and set it for the current buffer
  (c-add-style "NELSON" nelson-c-style t)
  ;; offset customizations not in nelson-c-style
  (c-set-offset 'member-init-intro '++)
  ;; other customizations
  ;(c-toggle-auto-state 1) ;; Turn on auto newline
  (my-common-prog-mode-settings)
  ; makes the underscore part of a word in C and C++ modes
  (modify-syntax-entry ?_ "w" c++-mode-syntax-table)
  (modify-syntax-entry ?_ "w" c-mode-syntax-table)
  (lambda ()
    (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
      (ggtags-mode 1)))
  )

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
#+END_SRC

** Emacs lisp

#+BEGIN_SRC emacs-lisp
(setq emacs-lisp-mode-hook 'my-common-prog-mode-settings)
#+END_SRC

** Java

#+BEGIN_SRC emacs-lisp
(defun my-java-mode-hook ()
  (setq indent-tabs-mode nil
        zeal-at-point-docset "java"))

(add-hook 'java-mode-hook 'my-java-mode-hook)
(add-hook 'java-mode-hook 'semantic-mode)
#+END_SRC

*** =emacs-eclim=

Utillity function to restart the Eclim server.

#+BEGIN_SRC emacs-lisp
(defun nl/restart-eclim (workspace-dir)
  "Restarts eclim.  If it is currently active then it is stopped first."
  (interactive (list (read-directory-name "Workspace directory: "
                                          eclimd-default-workspace nil t)))
  (if (get-buffer "*eclimd*") (stop-eclimd))
  (start-eclimd workspace-dir)
  (switch-to-buffer "*eclimd*")
  )
#+END_SRC

A gradle function to generate Javadoc for the project.

#+BEGIN_SRC emacs-lisp
(defun nl/gradle-javadoc ()
  "Uses gradle to build the Javadoc for the project."
  (interactive)
  (let* ((current-directory default-directory))
    (setq default-directory (locate-dominating-file default-directory "build.gradle"))
    (compile "gradle -q --console=plain javadoc")
    (setq default-directory current-directory)
    ))
#+END_SRC

** Perl

#+BEGIN_SRC emacs-lisp
(defun my-cperl-setup ()
  (cperl-set-style "C++")
  (my-common-prog-mode-settings))

(add-hook 'cperl-mode-hook 'my-cperl-setup)
#+END_SRC

** SQL

Taken from:
- http://truongtx.me/2014/08/23/setup-emacs-as-an-sql-database-client/

#+BEGIN_SRC emacs-lisp
(require 'epa-file)
(epa-file-enable)

(setq sql-connection-alist
      '((che.dev (sql-product 'mysql)
                 (sql-port 3306)
                 (sql-server "localhost")
                 (sql-user "root")
                 (sql-database "mysql"))
        (obelix.dev (sql-product 'mysql)
                    (sql-port 3306)
                    (sql-server "localhost")
                    (sql-user "root")
                    (sql-database "mysql"))))

(defun nl/sql-connect (product connection)
  "Connects to a database server of type PRODUCT using the CONNECTION type."
  (require 'nl-passwords (concat user-emacs-directory "my-password.el.gpg"))

  ;; update the password to the sql-connection-alist
  (let ((connection-info (assoc connection sql-connection-alist))
        (sql-password (car (last (assoc connection nl-sql-passwords)))))
    (delete sql-password connection-info)
    (nconc connection-info `((sql-password ,sql-password)))
    (setq sql-connection-alist (assq-delete-all connection sql-connection-alist))
    (add-to-list 'sql-connection-alist connection-info))

  ;; connect to database
  (setq sql-product product)
  (if current-prefix-arg
      (sql-connect connection connection)
    (sql-connect connection)))

(defun nl/sql-che-dev ()
  "Connects to the MySQL server running on machine 'che'."
  (nl/sql-connect 'mysql 'che.dev))

(defun nl/sql-obelix-dev ()
  "Connects to the MySQL server running on machine 'obelix'."
  (nl/sql-connect 'mysql 'obelix.dev))

(defvar nl/sql-servers-list
  '(("Che Dev" nl/sql-che-dev)
    ("Obelix Dev" nl/sql-obelix-dev))
  "A list of server name and the function to connect.")

(defun nl/sql-connect-server (func)
  "Connect to the input server using nl/sql-servers-list and FUNC."
  (interactive
   (helm-comp-read "Select server: " nl/sql-servers-list))
  (funcall func))
#+END_SRC
* Misc
** Constants

Is some cases we need to know what type of OS Emacs is running under.

#+BEGIN_SRC emacs-lisp
(defconst ostype-linux
  (if (integer-or-marker-p
       (string-match "linux" system-configuration)) t nil))

(defconst ostype-windows
  (if (integer-or-marker-p
       (string-match "pc-mingw32" system-configuration)) t nil))
#+END_SRC

** Aligning things

Align by colons (handy for JavaScript), align by commas, and align by
equal signs.

Borrowed from:

http://danconnor.com/post/5028ac91e8891a000000111f/align_and_columnize_key_value_data_in_emacs

#+BEGIN_SRC emacs-lisp
(defun align-colons (beg end)
  (interactive "r")
  (align-regexp beg end ":\\(\\s-*\\)" 1 1 t))

(defun align-commas (beg end)
  (interactive "r")
  (align-regexp beg end ",\\(\\s-*\\)" 1 1 t))

(defun align-equals (beg end)
  (interactive "r")
  (align-regexp beg end "\\(\\s-*\\)=" 1 1 t))

(defun align-parameters (beg end)
  (interactive "r")
  (align-regexp beg end "\\w+\\(\\s-*\\)\\w+,?" 1 1 t))
#+END_SRC

** Font size

=C-c C-+= and =C-c C--= are pretty useful, but only resize the current
buffer.  Here's a hack using ~set-frame-font~ and altering the font
size only:

#+BEGIN_SRC emacs-lisp
(defun my-alter-frame-font-size (fn)
  (let* ((current-font-name (frame-parameter nil 'font))
         (decomposed-font-name (x-decompose-font-name current-font-name))
         (font-size (string-to-int (aref decomposed-font-name 5))))
    (aset decomposed-font-name 5 (int-to-string (funcall fn font-size)))
    (set-frame-font (x-compose-font-name decomposed-font-name))))

(defun my-inc-frame-font-size ()
  (interactive)
  (my-alter-frame-font-size '1+))

(defun my-dec-frame-font-size ()
  (interactive)
  (my-alter-frame-font-size '1-))

(global-set-key (kbd "C-+") 'my-inc-frame-font-size)
(global-set-key (kbd "C--") 'my-dec-frame-font-size)
#+END_SRC

** Date and time stamps

Used for inserting date and time stamps, or date stamps into the
current buffer at the current location. I define my own format for
these.

#+BEGIN_SRC emacs-lisp
(defconst nl/dts-format-string "%e %b %Y %H:%M:%S"
  "A string specifying the format of the date-time stamp.
Refer to the documentation for 'format-time-string' for an explanation of the
meta characters available for use in this string.  Non-meta characters will
be inserted into the buffer without interpretation.")

(defvar nl/ds-format-string "%b%e/%Y"
  "A string specifying the format of the date stamp.
Refer to the documentation for 'format-time-string' for an explanation of the
meta characters available for use in this string.  Non-meta characters will
be inserted into the buffer without interpretation.")

(defun nl/insert-dts ()
  "Insert the date and time into the current buffer at the current location.
See the documentation for nl/dts-format-string to change the format of the
date-time stamp."
  (interactive)
  (insert (format-time-string nl/dts-format-string (current-time))))

(defun nl/insert-ds ()
  "Insert the date into the current buffer at the current location.
See the documentation for nl/dts-format-string to change the format of the
date-time stamp."
  (interactive)
  (insert (format-time-string nl/ds-format-string (current-time))))

#+END_SRC
** Journal

I keep notes in an org-mode file in my Dropbox folder. When I add
something to it in automatially inserts a time stamp.

#+BEGIN_SRC emacs-lisp
(defun nl/journal ()
  "Add an entry in the journal file."
  (interactive)
  (find-file "~/Dropbox/journal.org")
  (end-of-buffer)
  (insert "\n\n")
  (insert "* ")
  (nl/insert-dts)
  (insert "\n")
  )
#+END_SRC
** Occur

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+BEGIN_SRC emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))
#+END_SRC

** Camelcase to upper

Coverts camel case words to uppercase with underscore as delimiters.

#+BEGIN_SRC emacs-lisp
(defun nl/camelcase-to-upper ()
  (interactive)
  (replace-regexp "\\([A-Z]\\)" "_\\1" nil (region-beginning)(region-end))
  (upcase-region (region-beginning)(region-end)))
#+END_SRC

** Windows Font

#+BEGIN_SRC emacs-lisp
(when ostype-windows
    (set-face-attribute 'default nil :font "InputMonoCondensed Medium-9"))
#+END_SRC

** Narrow or widen

From [[http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][Artur Malabarba]]'s blog:

#+BEGIN_SRC emacs-lisp
(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or defun,
whichever applies first. Narrowing to org-src-block actually
calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is
already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning) (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if you
         ;; don't want it.
         (cond ((ignore-errors (org-edit-src-code))
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))

;;(define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
;; This line actually replaces Emacs' entire narrowing
;; keymap, that's how much I like this command. Only copy it
;; if that's what you want.
(define-key ctl-x-map "n" #'narrow-or-widen-dwim)
(add-hook 'LaTeX-mode-hook
          (lambda () (define-key LaTeX-mode-map "\C-xn" nil)))
(eval-after-load 'org-src
  '(define-key org-src-mode-map
     "\C-x\C-s" #'org-edit-src-exit))
#+END_SRC
